use std::path::{Path, PathBuf};

use color_eyre::eyre::{Result, WrapErr};
use serde::{Deserialize, Serialize};
use tokio::{
    fs,
    io::{AsyncReadExt, AsyncWriteExt},
};
use toml;

const DEFAULT_JVM_ARGS: &[&str] = &["-Xms4G", "-Xmx4G"];

#[derive(Serialize, Deserialize)]
pub(crate) struct InstanceJavaSettings {
    /// The major version of the JVM to use
    ///
    /// Will be either 8, 16, or 17 by default,
    /// depending on the server version
    pub version: u8,
    /// The arguments to pass to the JVM
    pub args: Vec<String>,
}

impl InstanceJavaSettings {
    pub fn new(version: u8) -> Self {
        Self {
            version,
            args: DEFAULT_JVM_ARGS.iter().map(|s| s.to_string()).collect(),
        }
    }
}

#[derive(Serialize, Deserialize)]
pub(crate) struct InstanceServerSettings {
    /// The path to the server jar file, relative to the instance directory
    pub jar: PathBuf,
    /// The arguments to pass to the server
    pub args: Vec<String>,
}

impl Default for InstanceServerSettings {
    fn default() -> Self {
        Self {
            jar: PathBuf::from("server.jar"),
            args: vec!["--nogui".to_string()],
        }
    }
}

#[derive(Serialize, Deserialize)]
pub(crate) struct InstanceSettings {
    /// The settings for the JVM
    pub java: InstanceJavaSettings,
    /// The settings relating to the server
    pub server: InstanceServerSettings,
}

impl InstanceSettings {
    pub fn new(version: u8) -> Self {
        Self {
            java: InstanceJavaSettings::new(version),
            server: InstanceServerSettings::default(),
        }
    }

    pub async fn from_file<P: AsRef<Path>>(path: P) -> Result<Self> {
        let path = path.as_ref();
        let mut file = fs::File::open(path)
            .await
            .wrap_err(format!("Error reading settings at {}", path.display()))?;

        let mut contents = String::new();
        file.read_to_string(&mut contents)
            .await
            .wrap_err(format!("Error reading settings at {}", path.display()))?;

        let settings: InstanceSettings = toml::from_str(&contents)?;

        Ok(settings)
    }

    pub async fn save<P: AsRef<Path>>(&self, path: P) -> Result<()> {
        let path = path.as_ref();
        fs::create_dir_all(path.parent().expect("infallible")).await?;
        let mut file = fs::File::create(path).await.wrap_err(format!(
            "Error creating settings file at {}",
            path.display()
        ))?;

        let mut contents =
            "# This file is automatically generated\n# Only edit if you know what you're doing!\n\n"
                .to_string();
        contents.push_str(&toml::to_string(self)?);

        file.write_all(contents.as_bytes()).await.wrap_err(format!(
            "Error writing settings to file at {}",
            path.display()
        ))?;

        Ok(())
    }
}
